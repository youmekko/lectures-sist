방명록 v1.5 (JSP + JDBC 버전)

1. 요구사항
- 일반사용자가 로그인 과정없이 글쓰기, 글출력, 글검색, 글삭제할 수 있다.
- 글쓰기 하는 경우 이름, 패스워드, 글내용 입력한다.
- 글삭제 하는 경우 글쓰기한 사용자인지 확인하는 기능 구현되어야 한다. 패스워드.
- 게시물에 대한 페이징 기능 구현.
- 관리자는 로그인 과정을 통해서 관리자 인증을 받는다.
- 관리자는 일반사용자가 쓴 글에 대한 블라인드 처리가 가능하다.
- 관리자는 사진 업로드 기능을 통해서 원하는 사진을 등록할 수 있다. 일반사용자는 사진을 캐러셀(슬라이드) 기능으로 볼 수 있다.
- 관리자는 업로드된 사진을 삭제할 수 있다.
- 구글맵을 이용해서 교육센터의 지도를 출력한다.
- 수료일 기준으로 남은 날짜 출력한다.

2. 화면설계
이미지 참조


3. 데이터베이스(MySQL) 준비

/*
방명록 저장용 테이블
-> 글번호, 글쓴이, 패스워드, 글내용, 글쓴날짜
*/
CREATE TABLE guestbook (
	gid VARCHAR(6) /* PK, 'G00001' 형태 */
	, name_ VARCHAR(20)
	, pw VARCHAR(20)
	, content VARCHAR(500)
	, regDate DATE /* 기본값 오늘 날짜 */
	, clientIP VARCHAR(15) /* XXX.XXX.XXX.XXX */
	, blind INT /* 기본값 0. 0 정상적인 경우, 1은 블라인드 처리.  */
);
	

ALTER TABLE guestbook 
	ADD CONSTRAINT guestbook_pk_gid PRIMARY KEY(gid);

INSERT INTO guestbook (gid, name_, pw, content, regDate, clientIP, blind)
	VALUES ('G00001', '관리자', 'admin', 'JSP 과정 진행 중입니다. 프로젝트 발표 사진도 올릴 예정입니다.', '2018-03-09', '211.63.89.68',  0);

INSERT INTO guestbook (gid, name_, pw, content, regDate, clientIP, blind) VALUES ((SELECT * FROM (SELECT CONCAT('G', LPAD(IFNULL(SUBSTRING(MAX(gid), 2), 0) + 1, 5, 0)) AS newGid FROM guestbook) g)
, '홍길동', '1234', '방명록 개설을 축하합니다.', NOW(), '211.63.89.68',  0);

COMMIT;

/* 일반사용자 모드 */
SELECT gid, name_, content, regDate FROM guestbook WHERE blind = 0 ORDER BY gid DESC;

/* 일반사용자 모드 */
SELECT COUNT(*) AS totalCount FROM guestbook WHERE blind = 0;

/* 일반사용자 모드 */
DELETE FROM guestbook WHERE blind=0 AND gid=번호 AND pw=패스워드;

/* 관리자 모드 */
SELECT gid, name_, content, regDate, clientIP, blind FROM guestbook ORDER BY gid DESC;

/* 관리자 모드 */
SELECT COUNT(*) AS totalCount FROM guestbook;

/* 관리자 모드 */
UPDATE guestbook SET blind=1 WHERE gid=번호;


/* 관리자 모드 */
CREATE TABLE loginInfo(
 id VARCHAR(20) -- PK
 , pw VARCHAR(20)
 );
 

/* 

특정 개수의 게시물 출력 (페이징 처리) 

- LIMIT 키워드 (MySQL 전용)

- 페이지당 offset

1페이지 0(count*(요청페이지-1))부터 20개

2페이지 20(count*(요청페이지-1))부터 20개

3페이지 40(count*(요청페이지-1))부터 20개

...

- 페이지당 count(20개씩)

*/
SELECT gid, name_, content, regDate 
	FROM guestbook 
    WHERE blind = 0 
    ORDER BY gid DESC
	LIMIT 20, 10;



 
ALTER TABLE loginInfo 
 ADD CONSTRAINT loginInfo_id_pk PRIMARY KEY (id);

INSERT INTO loginInfo (id, pw) VALUES('admin', '1234');
  
 ALTER TABLE members
 ADD COLUMN (id VARCHAR(20));

 ALTER TABLE members 
 ADD CONSTRAINT members_id_fk FOREIGN KEY (id) REFERENCES loginInfo(id);

 
 UPDATE members
 SET id='admin'
 WHERE mid_='M04';
 
-- 뷰 생성
CREATE OR REPLACE VIEW loginInfoView
AS
SELECT mid_, id, pw, name_, phone, email, regDate, deptId FROM loginInfo l INNER JOIN members m USING(id);

SELECT id, name_, phone, email, regDate FROM loginInfoView
	WHERE id='admin' AND PW='1234';



SELECT id, name_, phone, email, regDate FROM loginInfoView
	WHERE id='admin' AND PW='123';




/*
사진 정보 저장용 테이블
-> 사진번호, 사진파일이름(max:50), 사진설명(max:50)
*/
create table pictureList (
	pid  varchar(4)  /* PK. 'P001' 형태 */
	, picName varchar(50)
	, picContent varchar(50)
);

ALTER TABLE pictureList
	ADD CONSTRAINT pictureList_pk_pid PRIMARY KEY(pid);

INSERT INTO pictureList (pid, picName, picContent) 
	VALUES ((SELECT * FROM (SELECT CONCAT('P', LPAD(IFNULL(SUBSTRING(MAX(pid), 2), 0) + 1, 3, 0)) AS newPid FROM pictureList) p), 'ny.jpg', '뉴욕 공연');
INSERT INTO pictureList (pid, picName, picContent) 
	VALUES ((SELECT * FROM (SELECT CONCAT('P', LPAD(IFNULL(SUBSTRING(MAX(pid), 2), 0) + 1, 3, 0)) AS newPid FROM pictureList) p), 'la.jpg', 'LA 공연');
COMMIT;

SELECT pid, picName, picContent 
	FROM pictureList
	ORDER BY pid;

SELECT pid, picName, picContent 
	FROM pictureList
	WHERE pid='P002';

DELETE FROM picturelist WHERE pid='P002';


4. 작성 순서
1) 요구분석 결과에 따른 화면설계(MockUp, 웹디자인)
2) 데이터베이스에서 테이블 및 초기 자료 준비
3) 화면설계에 따른 쿼리 준비 -> INSERT, SELECT
4) 자료형 클래스 선언
5) DAO 클래스 선언 및 저장소 준비, 초기 자료 준비
6) DAO 클래스 전체 출력 메소드 작성
7) Test 클래스에서 전체 출력 메소드 테스트
8) 화면 설계에 따른 액션 클래스 작성
9) 전체 출력 메소드 연결
10) 입력 기능 추가
